1. What is the Big O for this?
    1) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over"
    Constant time - assuming every person in the room can hear me and takes the same amount of time to respond, whether this room had 2 people or 30 or the stated 15, the time to completion would be the same.


    2) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask.
    Linear time - the time to complete would scale linearly with the number of people I need to ask. 

2. Even or Odd
function isEven(value) {
    if (value % 2 === 0) {
        return true;
    }
    else {
        return false;
    }
}

Constant time. No matter the size of the requested value, the same two operations must be completed - the number is divided by two, and the remainder is evaluated to be 0 or not.

3. Are you Here?
function areYouHere(arr1, arr2) {
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}

Polynomial time O(n^k), where k=2, because there are two levels of looping.

4. Doubler
function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}

Linear. There is a single loop with a single operation conducted.

5. Naive search
function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
}

Linear. There is a single loop with a single comparison conducted.

6. Creating pairs
function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
}

Polynomial time O(n^k), where k=2, because there are two levels of looping.

7. Compute the sequence
function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i === 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
}

This produces a Fibonacci sequence, where each number in the sequence is the sum of the previous two numbers in the sequence.
Linear. There is a single loop with a single computation conducted.

8. An efficient search
function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}

Logarithmic time O(log(n)). The array to search gets cut in half with each iteration.

9. Random element
function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

Constant time. No matter the length of the array, a single operation is performed.

10. What am I?
function isWhat(n) {
    if (n < 2 || n % 1 !== 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i === 0) return false;
    }
    return true;
}

This function checks every integer between 2 and the input value and returns "true" if the input value is evenly divisible by that number, and "false" if it is not.

11. Tower of Hanoi

13. Recursive Big O
    1. 
    2.
    3.
    4.
    5.
    6.
    7.
    8.
    9.
    10.
    11.
    12.

14. Iterative Big O
    
